{"version":3,"sources":["components/Header.tsx","constants/apiUrl.ts","services/userService.ts","components/Login.tsx","components/AlarmCard.tsx","constants/genericConstants.ts","components/PMTable.tsx","utils/genericUtils.tsx","components/Main.tsx","services/alarmServices.ts","services/previsionService.ts","services/settingsService.ts","App.tsx","index.tsx"],"names":["Header","_ref","clientName","currentPage","setCurrentPage","_jsx","className","children","_jsxs","href","src","width","height","alt","style","color","fontWeight","NavDropdown","title","getTitle","id","onSelect","page","Item","eventKey","API_HOST","handleError","error","_error$response","response","status","Error","Login","setUser","username","setUsername","useState","password","setPassword","setError","usernameError","setUsernameError","passwordError","setPasswordError","role","InputGroup","Text","FormControl","type","concat","placeholder","value","onChange","e","target","onClick","async","length","user","url","axios","get","data","console","getUser","message","disabled","AlarmCard","total","porcentage","Card","text","border","getBorder","Body","backgroundColor","getBackgroundColor","Title","getIconColor","getPrevision","ALARM_TYPES","PREVISION_HEADERS","label","ALARM_HEADERS","SETTINGS_HEADERS","PMTable","headers","searchTerm","setSearchTerm","searchedData","setSearchedData","sortColumn","setSortColumn","sortOrder","setSortOrder","useEffect","result","trim","filter","sensor","Object","values","some","toString","toLowerCase","includes","sort","a","b","localeCompare","indexOfLastItem","indexOfFirstItem","currentItems","slice","totalPages","Math","ceil","pageItems","number","push","Pagination","active","paginate","pageNumber","maxWidth","Table","hover","map","header","index","handleSort","headerValue","item","keys","key","adjustPrevisonDate","prevision","split","Main","alarms","previsions","settings","tableHeaders","setTableHeaders","tableData","setTableData","forEach","alarmStatus","failurePredictability","parseInt","setAlarmStatus","sensorName","sensorLocale","machineName","getPrevisionTableData","alarm","date","time","predominantFactor","alarmColor","getAlarmTableData","yellowAlarmFFT","redAlarmFFT","yellowAlarmRMS","redAlarmRMS","variableType","getSettingsTableData","getCardTitle","getTotalPerType","getPorcentage","totalPerType","round","App","setAlarms","setPrevisions","setSettings","navigate","useNavigate","clientId","alarmData","getAlarm","previsionData","settingsData","getSettings","fetchData","company","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","Router"],"mappings":"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","file":"static/js/main.0a50a580.chunk.js","sourcesContent":["import React from 'react';\nimport { NavDropdown } from 'react-bootstrap';\nimport { HeaderProps } from '../models/components';\n\nconst Header: React.FC<HeaderProps> = ({clientName, currentPage, setCurrentPage}) => {\n  const getTitle = (): string => {\n    switch (currentPage) {\n      case '/prevision':\n        return 'Previsão';\n      case '/alarm':\n        return 'Alarme';\n      case '/settings':\n        return 'Sensores';\n      default:\n        return 'Previsão';\n    }\n  };\n\n  const handlePageChange = (page: string | null) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light border-bottom'>\n      <div className='container-lg'>\n        <a className='navbar-brand d-flex align-items-center' href='/'>\n          <img\n            src='/logo.png'\n            width='40'\n            height='34'\n            className='d-inline-block align-top me-2'\n            alt=''\n          />\n          <span className='ms-2' style={{ color: '#3957AF', fontWeight: 'bold' }}>\n            PredMaster\n          </span>\n        </a>\n        <div className='d-flex align-items-center'>\n          {clientName && (\n            <div className='me-3 border-end pe-3'>\n              <div className='collapse navbar-collapse'>\n                <ul className='navbar-nav me-auto'>\n                  <NavDropdown title={getTitle()} id='basic-nav-dropdown' onSelect={handlePageChange}>\n                    <NavDropdown.Item eventKey='/prevision'>Previsão</NavDropdown.Item>\n                    <NavDropdown.Item eventKey='/alarm'>Alarme</NavDropdown.Item>\n                    <NavDropdown.Item eventKey='/settings'>Sensores</NavDropdown.Item>\n                  </NavDropdown>\n                </ul>\n              </div>\n            </div>\n          )}\n          <span className='me-3'>{clientName ?? 'Nome do cliente'}</span>\n          <i className='fas fa-user-circle fa-lg d-inline-block align-top rounded-circle'></i>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;","export const API_HOST = 'https://smiling-cardigan-cow.cyclic.app'\nexport const USER_API = '/predmaster/api/user';\nexport const SETTINGS_API = '/predmaster/api/settings';\nexport const PREVISION_API = '/predmaster/api/prevision';\nexport const ALARM_API = '/predmaster/api/alarm';","import axios from 'axios';\nimport { API_HOST, USER_API } from '../constants/apiUrl';\n\nexport const getUser = async (username: string, password: string): Promise<any> => {\n  try {\n    const url = API_HOST + USER_API + `?username=${username}&password=${password}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('getUser - ', error);\n    handleError(error);\n  }\n}\n\nconst handleError = (error: any) => {\n  if (error.response?.status === 404) {\n    throw new Error('Usuário não encontrado.');\n  } else {\n    throw new Error('Erro ao entrar na aplicação.');\n  }\n}","import React, { useState } from 'react';\nimport { getUser } from '../services/userService';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { LoginProps } from '../models/components';\nimport { FormControl, InputGroup } from 'react-bootstrap';\n\nconst Login: React.FC<LoginProps> = ({ setUser }) => {\n  const [username, setUsername] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [usernameError, setUsernameError] = useState<boolean>(false);\n  const [passwordError, setPasswordError] = useState<boolean>(false);\n\n  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setUsername(e.target.value);\n    setUsernameError(false);\n  }\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setPassword(e.target.value);\n    setPasswordError(false);\n  }\n\n  const handleLogin = async (): Promise<void> => {\n    try {\n      if (username.length === 0) {\n        setUsernameError(true);\n        throw new Error('Nome do usuário é obrigatório.');\n      } else if (password.length === 0) {\n        setPasswordError(true);\n        throw new Error('Senha é obrigatório.');\n      } else {\n        const user = await getUser(username, password);\n        setUser(user);\n      }\n    } catch (error: any) {\n      console.error('handleLogin - ', error);\n      setError(error.message);\n    }\n  };\n\n  return (\n    <div className='container mt-5'>\n      <div className='row justify-content-center'>\n        <div className='col-md-4'>\n          <div className='card'>\n            <div className='card-body'>\n              <div className='text-center mb-3'>\n                <img\n                  src='/logo.png'\n                  width='159'\n                  height='144'\n                  alt=''\n                />\n              </div>\n              <h2 className='card-title text-center predmaster-title mb-5' style={{color: '#3957AF', fontWeight: 'bold'}}>\n                PredMaster Dashboard\n              </h2>\n              {error && (\n                <div className='alert alert-danger' role='alert'>\n                  {error}\n                </div>\n              )}\n              <form>\n              <div className='mb-4'>\n                <InputGroup>\n                  <InputGroup.Text>\n                    <i className='fas fa-user'></i>\n                  </InputGroup.Text>\n                  <FormControl\n                    type='text'\n                    className={`form-control ${usernameError ? 'is-invalid' : ''}`}\n                    id='username'\n                    placeholder='Nome de usuário'\n                    value={username}\n                    onChange={handleUsernameChange}\n                  />\n                </InputGroup>\n              </div>\n              <div className='mb-4'>\n                <InputGroup>\n                  <InputGroup.Text>\n                    <i className='fas fa-lock'></i>\n                  </InputGroup.Text>\n                  <FormControl\n                    type='password'\n                    className={`form-control ${passwordError ? 'is-invalid' : ''}`}\n                    id='password'\n                    placeholder='Senha'\n                    value={password}\n                    onChange={handlePasswordChange}\n                  />\n                </InputGroup>\n              </div>\n                <div className='d-grid gap-2'>\n                  <button\n                    type='button'\n                    className='btn btn-primary'\n                    onClick={handleLogin}\n                  >\n                    Entrar\n                  </button>\n                  <button\n                    type='button'\n                    className='btn btn-light'\n                    disabled\n                  >\n                    Esqueceu sua senha?\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","import React  from 'react';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AlarmCardProps } from '../models/components';\n\n\nconst AlarmCard: React.FC<AlarmCardProps> = ({\n  color,\n  title,\n  total,\n  porcentage\n}) => {\n  const getBorder = (): string => {\n    switch (color) {\n      case 'Vermelho':\n      case 'Amarelo':\n      case 'Verde':\n        return 'none';\n      default:\n        return 'default';\n    }\n  }\n\n  const getBackgroundColor = (): string => {\n    switch (color) {\n      case 'Vermelho':\n        return '#FFDDE3';\n      case 'Amarelo':\n        return '#FFE9C5';\n      case 'Verde':\n        return '#E3FFD6';\n      default:\n        return '#FFFFFF';\n    }\n  }\n\n  const getIconColor = (): string => {\n    switch (color) {\n      case 'Vermelho':\n        return '#FD0F39';\n      case 'Amarelo':\n        return '#FFA000';\n      case 'Verde':\n        return '#4CAF50';\n      default:\n        return '#BFBFBF';\n    }\n  }\n\n  const getPrevision = (): string => {\n    switch (color) {\n      case 'Vermelho':\n        return 'menor que 60 dias'\n      case 'Amarelo':\n        return 'entre 60 e 120 dias';\n      case 'Verde':\n        return 'entre 121 e 365 dias';\n      default:\n        return '366 dias';\n    }\n  }\n\n  return (\n    <Card text='dark' style={{width: '18rem', border: getBorder()}} className='mb-2'>\n      <Card.Body style={{backgroundColor: getBackgroundColor()}}>\n        <Card.Title className='d-flex justify-content-between align-items-center'>\n          <span style={{ fontWeight: 'bold' }}>{title}</span>\n          <span style={{color: getIconColor()}}>\n            <i className='fas fa-exclamation-triangle'></i>\n          </span>\n        </Card.Title>\n        <Card.Text>\n          <div>Total: {total}</div>\n          <div>Porcentagem: {porcentage}</div>\n          <div>Previsão: {getPrevision()}</div>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default AlarmCard;\n","export const DEFAULT_ALARM = {\n  sensorName: 'Não definido',\n  alarmColor: '-',\n  date: '-',\n  prevision: '-'\n};\n\nexport const ALARM_TYPES = [\n  'Vermelho',\n  'Amarelo',\n  'Verde',\n  'Transparente'\n];\n\nexport const PREVISION_HEADERS = [\n  {\n    value: 'sensorName',\n    label: 'Nome do Sensor'\n  },\n  {\n    value: 'sensorLocale',\n    label: 'Localização'\n  },\n  {\n    value: 'machineName',\n    label: 'Máquina'\n  },\n  {\n    value: 'failurePredictability',\n    label: 'Previsão'\n  }\n];\n\nexport const ALARM_HEADERS = [\n  {\n    value: 'sensorName',\n    label: 'Nome do Sensor'\n  },\n  {\n    value: 'sensorLocale',\n    label: 'Localização'\n  },\n  {\n    value: 'machineName',\n    label: 'Máquina'\n  },\n  {\n    value: 'date',\n    label: 'Data'\n  },\n  {\n    value: 'time',\n    label: 'Hora'\n  },\n  {\n    value: 'predominantFactor',\n    label: 'Fator Predomintante'\n  },\n  {\n    value: 'alarmColor',\n    label: 'Cor'\n  }\n];\n\nexport const SETTINGS_HEADERS = [\n  {\n    value: 'sensorName',\n    label: 'Nome do Sensor'\n  },\n  {\n    value: 'sensorLocale',\n    label: 'Localização'\n  },\n  {\n    value: 'machineName',\n    label: 'Máquina'\n  },\n  {\n    value: 'yellowAlarmFFT',\n    label: 'FFT Amarelo'\n  },\n  {\n    value: 'redAlarmFFT',\n    label: 'FFT Vermelho'\n  },\n  {\n    value: 'yellowAlarmRMS',\n    label: 'RMS Amarelo'\n  },\n  {\n    value: 'redAlarmRMS',\n    label: 'RMS Vermelho'\n  },\n  {\n    value: 'variableType',\n    label: 'Váriavel'\n  }\n];\n","import React, { useEffect, useState } from 'react';\nimport { Table, FormControl, InputGroup, Pagination } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../assets/styles/App.css';\nimport { TableProps } from '../models/components';\n\nconst PMTable: React.FC<TableProps> = ({ headers, data }) => {\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [searchedData, setSearchedData] = useState<any[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [sortColumn, setSortColumn] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc' | 'none'>('none');\n\n  useEffect(() => {\n    let result: any;\n\n    if (searchTerm.trim() === '') {\n      result = data;\n    } else {\n      result = data.filter((sensor: any) =>\n        Object.values(sensor).some((value: any) =>\n          value.toString().toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      );\n    }\n\n    setSearchedData(result);\n  }, [searchTerm, data]);\n\n  useEffect(() => {\n    let result: any;\n\n    if (sortOrder === 'asc') {\n      result = [...searchedData].sort((a, b) => a[sortColumn].localeCompare(b[sortColumn]));\n    } else if (sortOrder === 'desc') {\n      result = [...searchedData].sort((a, b) => b[sortColumn].localeCompare(a[sortColumn]));\n    } else {\n      result = data;\n    }\n\n    setSearchedData(result);\n  }, [sortColumn, sortOrder]);\n\n  const itemsPerPage = 10;\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = searchedData.slice(indexOfFirstItem, indexOfLastItem);\n  const totalPages = Math.ceil(searchedData.length / itemsPerPage);\n\n  const pageItems = [];\n  for (let number = 1; number <= totalPages; number++) {\n    pageItems.push(\n      <Pagination.Item\n        key={number}\n        active={number === currentPage}\n        onClick={() => paginate(number)}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n\n  const handleSort = (headerValue: string) => {\n    if (sortOrder === 'none') {\n      setSortOrder('asc');\n    } else if (sortOrder === 'asc') {\n      setSortOrder('desc');\n    } else {\n      setSortOrder('none');\n    }\n\n    setSortColumn(headerValue);\n  };\n\n  const getSortIcon = (): any => {\n    if (sortOrder === 'asc') {\n      return ('  ↑');\n    } else if (sortOrder === 'desc') {\n      return ('  ↓');\n    } else {\n      return ('');\n    }\n  }\n\n  return (\n    <div>\n      <div className='d-flex justify-content-end'>\n        <InputGroup style={{ maxWidth: '250px' }}>\n          <InputGroup.Text>\n            <i className='fas fa-search'></i>\n          </InputGroup.Text>\n          <FormControl\n            placeholder='Pesquisar...'\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </InputGroup>\n      </div>\n      <Table hover className='mt-3'>\n        <thead>\n          <tr className='table-active'>\n            {headers.map((header, index) => (\n              <th key={index} onClick={() => handleSort(header.value)}>\n                <span>{header.label}</span>\n                {sortColumn === header.value &&\n                  <span>{getSortIcon()}</span>\n                }\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {currentItems.map((item, index) => (\n            <tr key={index}>\n              {Object.keys(item).map((key) => (\n                <td key={key}>{item[key]}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <div className='d-flex justify-content-center custom-pagination'>\n        <Pagination>{pageItems}</Pagination>\n      </div>\n    </div>\n  );\n};\n\nexport default PMTable;","import { Alarm } from '../models/alarm';\nimport { AlarmTableData, PrevisionTableData, SettingsTableData } from '../models/components';\nimport { Prevision } from '../models/prevision';\nimport { Settings } from '../models/settings';\n\nexport const adjustPrevisonDate = (prevision: string): string => {\n  const parts = prevision.split(',');\n  return parts[0].trim() + ' dias';\n}\n\nexport const getPrevisionTableData = (previsions: Prevision[]): PrevisionTableData[] => {\n  return previsions.map(prevision => ({\n    sensorName: prevision.sensorName,\n    sensorLocale: prevision.sensorLocale,\n    machineName: prevision.machineName,\n    failurePredictability: adjustPrevisonDate(prevision.failurePredictability),\n  }));\n}\n\nexport const getAlarmTableData = (alarms: Alarm[]): AlarmTableData[] => {\n  return alarms.map(alarm => ({\n    sensorName: alarm.sensorName,\n    sensorLocale: alarm.sensorLocale,\n    machineName: alarm.machineName,\n    data: alarm.date,\n    time: alarm.time,\n    predominantFactor: alarm.predominantFactor,\n    alarmColor: alarm.alarmColor,\n  }));\n}\n\nexport const getSettingsTableData = (settings: Settings[]): SettingsTableData[] => {\n  return settings.map(sensor => ({\n    sensorName: sensor.sensorName,\n    sensorLocale: sensor.sensorLocale,\n    machineName: sensor.machineName,\n    yellowAlarmFFT: sensor.yellowAlarmFFT,\n    redAlarmFFT: sensor.redAlarmFFT,\n    yellowAlarmRMS: sensor.yellowAlarmRMS,\n    redAlarmRMS: sensor.redAlarmRMS,\n    variableType: sensor.variableType\n  }));\n}","import React, { useEffect, useState } from 'react';\nimport AlarmCard from './AlarmCard';\nimport { MainProps } from '../models/components';\nimport { ALARM_HEADERS, ALARM_TYPES, PREVISION_HEADERS, SETTINGS_HEADERS } from '../constants/genericConstants';\nimport PMTable from './PMTable';\nimport { Prevision } from '../models/prevision';\nimport { getAlarmTableData, getPrevisionTableData, getSettingsTableData } from '../utils/genericUtils';\n\nconst Main: React.FC<MainProps> = ({\n  alarms,\n  previsions,\n  settings,\n  currentPage\n}) => {\n  const [tableHeaders, setTableHeaders] = useState<any>([]);\n  const [tableData, setTableData] = useState<any[]>([]);\n\n  const setAlarmStatus = (prevision: Prevision): string => {\n    const failurePredictability = parseInt(prevision.failurePredictability);\n\n    if (failurePredictability >= 121 && failurePredictability <= 365) {\n      return 'Verde';\n    } else if (failurePredictability >= 60 && failurePredictability <= 120) {\n      return 'Amarelo';\n    } else if (failurePredictability >= 0 && failurePredictability < 60) {\n      return 'Vermelho';\n    } else {\n      return 'Transparente';\n    }\n  }\n\n  useEffect(() => {\n    previsions.forEach(prevision => {\n      prevision.alarmStatus = setAlarmStatus(prevision);\n    });\n  }, [previsions]);\n\n  useEffect(() => {\n    switch (currentPage) {\n      case '/prevision':\n        setTableHeaders(PREVISION_HEADERS);\n        setTableData(getPrevisionTableData(previsions));\n      break;\n      case '/alarm':\n        setTableHeaders(ALARM_HEADERS);\n        setTableData(getAlarmTableData(alarms));\n      break;\n      case '/settings':\n        setTableHeaders(SETTINGS_HEADERS);\n        setTableData(getSettingsTableData(settings));\n      break;\n    }\n  }, [currentPage]);\n\n  const getCardTitle = (type: string): string => {\n    switch (type) {\n      case 'Vermelho':\n        return 'Alarme Vermelho';\n      case 'Amarelo':\n        return 'Alarme Amarelo';\n      case 'Verde':\n        return 'Alarme Verde';\n      default:\n        return 'Sem Conexão';\n    }\n  }\n\n  const getTotalPerType = (type: string): string => {\n    const total = previsions.filter(prevision => prevision.alarmStatus === type).length;\n    return total.toString() + ' alarmes';\n  }\n\n  const getPorcentage = (type: string): string => {\n    const total = previsions.length;\n    const totalPerType = previsions.filter(prevision => prevision.alarmStatus === type).length;\n    const porcentage = Math.round((totalPerType / total) * 100);\n    return porcentage.toString() + '%';\n  }\n\n  return (\n    <div className='container mt-4' style={{maxWidth: '1320px'}}>\n      <div className='row'>\n        {ALARM_TYPES.map(type => (\n          <div key={type} className={'col-md-3 mb-3 d-flex'}>\n            <AlarmCard\n              color={type}\n              title={getCardTitle(type)}\n              total={getTotalPerType(type)}\n              porcentage={getPorcentage(type)}\n            />\n          </div>\n        ))}\n      </div>\n      <div className='row justify-content-center'>\n        <div className='col-md-12 mt-4'>\n          <PMTable headers={tableHeaders} data={tableData}/>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;","import axios from 'axios';\nimport { ALARM_API, API_HOST  } from '../constants/apiUrl';\n\nexport const getAlarm  = async (clientId: string): Promise<any> => {\n  try {\n    const url = API_HOST + ALARM_API + `?clientId=${clientId}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('getAlarm - ', error);\n    handleError(error);\n  }\n}\n\nconst handleError = (error: any) => {\n  if (error.response?.status === 404) {\n    throw new Error('Alarme não encontrado.');\n  } else {\n    throw new Error('Erro ao carregar alarmes.');\n  }\n}","import axios from 'axios';\nimport { API_HOST, PREVISION_API,  } from '../constants/apiUrl';\n\nexport const getPrevision = async (clientId: string): Promise<any> => {\n  try {\n    const url = API_HOST + PREVISION_API + `?clientId=${clientId}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('getPrevision - ', error);\n    handleError(error);\n  }\n}\n\nconst handleError = (error: any) => {\n  if (error.response?.status === 404) {\n    throw new Error('Previsão não encontrado.');\n  } else {\n    throw new Error('Erro ao carregar previsões.');\n  }\n}","import axios from 'axios';\nimport { API_HOST, SETTINGS_API } from '../constants/apiUrl';\n\nexport const getSettings = async (clientId: string): Promise<any> => {\n  try {\n    const url = API_HOST + SETTINGS_API + `?clientId=${clientId}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('getSettings - ', error);\n    handleError(error);\n  }\n}\n\nconst handleError = (error: any) => {\n  if (error.response?.status === 404) {\n    throw new Error('Configuração não encontrada.');\n  } else {\n    throw new Error('Erro carregar configuracoes.');\n  }\n}","import React, { useEffect, useState } from 'react';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Login from './components/Login';\nimport Main from './components/Main';\nimport { User } from './models/user';\nimport { Pages } from './models/components';\nimport { Alarm } from './models/alarm';\nimport { Prevision } from './models/prevision';\nimport { Settings } from './models/settings';\nimport { getAlarm } from './services/alarmServices';\nimport { getPrevision } from './services/previsionService';\nimport { getSettings } from './services/settingsService';\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<User | undefined>();\n  const [alarms, setAlarms] = useState<Alarm[]>([]);\n  const [previsions, setPrevisions] = useState<Prevision[]>([]);\n  const [settings, setSettings] = useState<Settings[]>([]);\n  const [currentPage, setCurrentPage] = useState<Pages>('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (user?.username) {\n          const clientId = user.username;\n  \n          const alarmData = await getAlarm(clientId);\n          setAlarms(alarmData);\n    \n          const previsionData = await getPrevision(clientId);\n          setPrevisions(previsionData);\n    \n          const settingsData = await getSettings(clientId);\n          setSettings(settingsData);\n\n          setCurrentPage('/prevision');\n        } else {\n          throw new Error('Usuário não encontrado');\n        }\n      } catch (error) {\n        console.error('fetchData -', error);\n      }\n    }\n\n    fetchData();\n  }, [user]);\n\n  useEffect(() => {\n    navigate(currentPage);\n  }, [currentPage]);\n\n  return (\n    <div className='app'>\n      <Header clientName={user?.company} currentPage={currentPage} setCurrentPage={setCurrentPage}/>\n      <Routes>\n        <Route path='/' element={<Login setUser={setUser} />} />\n        <Route\n          path='/prevision'\n          element={<Main currentPage='/prevision' alarms={alarms} previsions={previsions} settings={settings} />}\n        />\n        <Route\n          path='/settings'\n          element={<Main currentPage='/settings' alarms={alarms} previsions={previsions} settings={settings} />}\n        />\n        <Route\n          path='/alarm'\n          element={<Main currentPage='/alarm' alarms={alarms} previsions={previsions} settings={settings} />}\n        />\n        <Route\n          path='/history' />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\nimport './assets/styles/global.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <Router>\n    <App />\n  </Router>\n);"],"sourceRoot":""}